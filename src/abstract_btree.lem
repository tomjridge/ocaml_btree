open import Pervasives Set_extra Assert_extra Maybe_extra

module Prelude = struct

  val rev_apply : forall 'a 'b.
    'a ->
    ('a -> 'b) ->
    'b
  let rev_apply x f = f x

  type rresult 'a = Ok of 'a | Error

  val rresult_to_option : forall 'a.
    rresult 'a ->
    maybe 'a
  let rresult_to_option r = (
      match r with
      | Ok r' -> Just r'
      | Error -> Nothing
      end)

  val from_0_to :
    nat ->
    list nat
  let rec from_0_to n = (
      match n with
      | 0 -> [0]
      | _ -> from_0_to (n-1)++[n]
      end)
end

module Store = struct
  open Prelude

  type page 'bs = Page of 'bs (* bytes *)

  type page_ref 'r = Page_ref of 'r

  val dest_page_ref : forall 'r.
    page_ref 'r ->
    'r
  let dest_page_ref (Page_ref r) = r


  type store 'r 'bs = Store of (map (page_ref 'r) (page 'bs)) (* different to paper: we store actual bytes *)

  val dest_store : forall 'r 'bs.
    store 'r 'bs ->
    map (page_ref 'r) (page 'bs)
  let dest_store m = (match m with Store m -> m end)

  val ref_to_page : forall 'r 'bs.
    store 'r 'bs ->
    page_ref 'r ->
    maybe (page 'bs)
  let ref_to_page m pr = Map.lookup pr (dest_store m)
end

module Frame = struct
  open Store

  type key 'k = Key of 'k

  val dest_key : forall 'k.
    key 'k ->
    'k
  let dest_key (Key k) = k

  type value 'v = Value of 'v
  declare {isabelle} rename type value = value_t

  val dest_value : forall 'v.
    value 'v ->
    'v
  let dest_value v = (match v with Value v -> v end)

  type node_frame 'r 'k =
    <|
      nf_n  : nat;                  (* number of keys *)
      nf_ks : nat -> key 'k;      (* [nf_ks] returns the key for the given index *)
      nf_rs : nat -> page_ref 'r; (* [nf_rs] returns the page_ref for the given index --there should be nf_n + 1 page_refs stored in a [node_frame] *)
      |>

  type leaf_frame 'k 'v =
    <|
      lf_kvs : list (key 'k * value 'v);
    |>

  type frame 'r 'k 'v = Frm_I of node_frame 'r 'k | Frm_L of leaf_frame 'k 'v
end

module Page2Frame = struct
  (* interpretation of pages *)
  open Store
  open Frame

  (* note that this forces that the page internally stores its type;
  this is not necessary, but is used by step_find *)
  type page_to_frame 'bs 'k 'r 'v = P2f of (page 'bs -> frame 'r 'k 'v)

  val dest_p2f : forall 'bs 'k 'r 'v.
    page_to_frame 'bs 'k 'r 'v ->
    (page 'bs -> frame 'r 'k 'v)
  let dest_p2f p2f = (match p2f with P2f p2f -> p2f end)

  (* to convert a page_ref to a frame, lookup the page option and use the above *)
  type ctxt 'bs 'k 'r 'v =
    <|
      ctxt_p2f : page_to_frame 'bs 'k 'r 'v;
    |>

  val page_ref_to_frame : forall 'bs 'k 'r 'v.
    ctxt 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    maybe (frame 'r 'k 'v)
  let page_ref_to_frame ctxt s0 r0 = (
      match ref_to_page s0 r0 with
      | Nothing -> Nothing
      | Just p ->
         let p2f = dest_p2f (ctxt.ctxt_p2f) in
         Just (p2f p)
      end
    )
end

module Btree = struct
  open Frame
  open Prelude
  open Page2Frame
  open Store

  type btree 'k 'v =
    Tr_nd of (nat * (nat -> key 'k) * (nat -> btree 'k 'v))
    | Tr_lf of (list (key 'k * value 'v))

  type tree_height = nat

  val btree_to_kvs : forall 'k 'v.
    btree 'k 'v ->
    list (key 'k * value 'v)
  let rec btree_to_kvs t = (
      match t with
      | Tr_lf kvs -> kvs
      | Tr_nd (nk,_,n2t) ->
         let subtrees = (List.map n2t (from_0_to nk)) in
         let subtrees_kvs = List.map btree_to_kvs subtrees in
         List.concat subtrees_kvs
      end)

  (* NB this has an explicit n argument, whereas wfness gives us that we can just use page_ref_to_frame *)
  val page_ref_to_btree : forall 'bs 'k 'r 'v.
    ctxt 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    maybe (btree 'k 'v)
  let rec page_ref_to_btree ctxt s0 r0 n = (
      match n with
      | 0  -> (
        match page_ref_to_frame ctxt s0 r0 with
        | Nothing -> (rresult_to_option (Error))
        | Just frm -> (
          match frm with
          | Frm_L lf -> Just (Tr_lf (lf.lf_kvs))
          | _ -> (rresult_to_option (Error)) (* attempt to access missing page *)
          end
        )
        end
      )
      | n_plus_one ->
         let n' = n_plus_one - 1 in
         (match page_ref_to_frame ctxt s0 r0 with
          | Nothing -> (rresult_to_option (Error))
          | Just frm -> (
            match frm with
            | Frm_I nf ->
               let n  = nf.nf_n  in
               let ks = nf.nf_ks in
               let rs = nf.nf_rs in
               let (f0:(page_ref 'r -> maybe (btree 'k 'v))) =
                 (fun r ->  page_ref_to_btree ctxt s0 r n')
               in
               let prop =
                 let refs_to_trees = List.map rs (from_0_to n) in
                 let subtrees = List.map f0 refs_to_trees in
                 List.all isJust subtrees
               in
               (match prop with
                | true ->
                   let subtree =
                     (fun (m:nat) -> fromJust (f0 (rs m)))
                   in
                   Just(Tr_nd(n,ks,subtree))
                | _ -> (rresult_to_option (Error)) (* Frm_I was not wellformed - prop was false *)
                end)
            | _ -> (rresult_to_option (Error)) (* found Frm_L but tree_height was not 0 *)
            end)
          end)
      end)

  val page_ref_to_kvs : forall 'bs 'k 'r 'v.
    ctxt 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    maybe (list (key 'k * value 'v))
  let page_ref_to_kvs ctxt s0 r0 n0 = (
      match page_ref_to_btree ctxt s0 r0 n0 with
      | Just t -> Just (btree_to_kvs t)
      | _ -> Nothing
      end)

  val kvs_to_map : forall 'k 'v.
    (list (key 'k * value 'v)) ->
    map (key 'k) (value 'v)
  let kvs_to_map l = Map.fromList l

  val page_ref_to_map : forall 'bs 'k 'r 'v.
    ctxt 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    maybe (map (key 'k) (value 'v))
  let page_ref_to_map ctxt s0 r0 n0 = (
      match page_ref_to_kvs ctxt s0 r0 n0 with
      | Just l -> Just (kvs_to_map l)
      | _ -> Nothing
      end)

  val page_ref_key_to_v : forall 'bs 'k 'r 'v.
    ctxt 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    key 'k ->
    tree_height ->
    maybe (value 'v)
  let page_ref_key_to_v ctxt s0 r0 k0 n0 =
    let m0 = page_ref_to_map ctxt s0 r0 n0 in
    Maybe.bind m0 (Map.lookup k0)

end

module KeyTo = struct
  open Store
  open Frame
  open Page2Frame

  type key_to_ref 'bs 'k 'r 'v = K2r of (node_frame 'r 'k -> key 'k -> page_ref 'r)

  val key_to_v : forall 'r 'k 'v.
    leaf_frame 'k 'v ->
    key 'k ->
    maybe (value 'v)
  let key_to_v lf k = Map.lookup k (Map.fromList lf.lf_kvs)

  val dest_key_to_ref : forall 'bs 'k 'r 'v.
    key_to_ref 'bs 'k 'r 'v ->
    (node_frame 'r 'k -> key 'k -> page_ref 'r)
  let dest_key_to_ref k2r = (match k2r with K2r k2r -> k2r end)

  type ctxt1 'bs 'k 'r 'v =
    <|
      ctxt1_page_to_frame : page_to_frame 'bs 'k 'r 'v;
      ctxt1_key_to_ref  : key_to_ref    'bs 'k 'r 'v;
    |>
end

module Find = struct
  open Frame
  open Store
  open KeyTo
  open Prelude
  open Page2Frame
  open KeyTo
  open Btree

  type find_state_l 'bs 'k 'r 'v =
    <|
      fsl_k : key 'k;
      fsl_r : page_ref 'r;
    |>

  type find_state_r 'bs 'k 'r 'v =
    <|
      fsr_r : page_ref 'r;
      fsr_v : maybe (value 'v);
    |>

  type find_state 'bs 'k 'r 'v =
    Fs_l of find_state_l  'bs 'k 'r 'v
    | Fs_r of find_state_r  'bs 'k 'r 'v


  val fs_step : forall 'bs 'k 'r 'v.
    ctxt1 'bs 'k 'r 'v ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v)) ->
    maybe ((store 'r 'bs) * (find_state 'bs 'k 'r 'v))
  let fs_step ctxt1 s0fs0 = (
      let (s0,fs0) = s0fs0 in
      match fs0 with
      | Fs_l fsl ->
         let r0 = fsl.fsl_r in
         let k0 = fsl.fsl_k in
         (match (page_ref_to_frame (<|ctxt_p2f=ctxt1.ctxt1_page_to_frame|>) s0 r0) with
          | Nothing -> rresult_to_option Error (* invalid page access *)
          | Just frm ->
             (match frm with
              | Frm_I nf ->
                 let k2r = dest_key_to_ref (ctxt1.ctxt1_key_to_ref) in
                 let r'  = k2r nf k0 in
                 Just (s0, Fs_l (<|fsl with fsl_r = r'|>))
              | Frm_L lf ->
                 let k2v = key_to_v in
                 let v = k2v lf k0 in
                 Just (s0, Fs_r <| fsr_r = r0; fsr_v = v|>)
              end)
          end)
      | Fs_r _ -> rresult_to_option Error (* attempt to step Fs_r *)
      end
    )


  val fs_step_as_fun : forall 'bs 'k 'r 'v.
    ctxt1 'bs 'k 'r 'v ->
    tree_height ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v)) ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v))
  let rec fs_step_as_fun ctxt1 n0 s0fs0 = (
      let s0fs1 = fromJust (fs_step ctxt1 s0fs0) in
      (if n0 = 0
      then s0fs1
      else fs_step_as_fun ctxt1 (n0 - 1) (s0fs1))
    )
end

module WellFormedness = struct
  open Store
  open Frame
  open Page2Frame
  open Btree
  open KeyTo

  val wf_store : forall 'r 'bs 'k 'v.
    store 'r 'bs ->
    ctxt1 'bs 'k 'r 'v ->
    tree_height ->
    bool
  (*here I need a transitive closure using page_ref_to_frame: I need
  to check that for whatever page_ref I have, if it points to an inode
  frame, the chain of page_ref must arrive in to the leaf in
  (tree_height) steps. If it points to a leaf node its n0 must be 0.*)
  let wf_store s0 ctxt1 tree_height =
    let all_page_refs = Map.domain (dest_store s0) in
    let f0 = (fun f r0 ->
        let maybe_frm  =
          page_ref_to_frame (<|ctxt_p2f = ctxt1.ctxt1_page_to_frame|>) s0 r0
        in
        f maybe_frm)
    in
    (match (Set.size all_page_refs) with
     (*an empty domain means a btree without root *)
     | 0 -> false
     (*a single page_ref means we have only the root node (that can
     contain an empty [kvs])*)
     | 1 ->
        let f1 = (fun maybe_frm ->
            (match maybe_frm with
             | Nothing -> false (* ctxt must be wf *)
             | Just (Frm_I _) -> false (* a single page_ref must point to a leaf frame *)
             | Just (Frm_L _) -> true (* FIXME constraint on the order of the kvs? *)
             end)
          )
        in
        Set.all (f0 f1) all_page_refs
     (* many page_refs means we have inodes, so all page refs must
     point to a leaf frame, and we cannot have empty [kvs] *)
     | _ ->
        let f1 = (fun maybe_frm ->
            (match maybe_frm with
             | Nothing -> false (* ctxt must be wf *)
             | Just (Frm_I _) ->
             (* each page_ref must point to a leaf frame -- how do we
             prevent loops? by decreasing the store? Can be done, but
             it is ineffiecient: we'd repeat most of the
             computations. We can use the height instead: we can say
             that at height 0, we must have a leaf. *)
                true
             | Just (Frm_L lf) -> not (List.null lf.lf_kvs) (* [kvs] must be not empty *)
             end)
          )
        in
        Set.all (f0 f1) all_page_refs
     end)
end

module FindCorrectness = struct
  open Find
  open Frame
  open Store
  open Page2Frame
  open Btree
  open KeyTo

  val fs_step_invariant : forall 'bs 'k 'r 'v.
    ctxt 'bs 'k 'r 'v ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v)) ->
    tree_height ->
    maybe (value 'v) ->
    bool
  let fs_step_invariant ctxt s0fs0 n0 v0 = (
      let (s0,fs0) = s0fs0 in
      match fs0 with
      | Fs_l fsl ->
         let k0 = fsl.fsl_k in
         let r0 = fsl.fsl_r in
         let v' = page_ref_key_to_v ctxt s0 r0 k0 n0 in
         v' = v0
      | Fs_r fsr ->
         let v' = fsr.fsr_v in
         v' = v0
      end)
end
